/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/keys.h>

/ {
    behaviors {
        hml: hml {
            compatible = "zmk,behavior-hold-tap";
            label = "HML";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <80>;
            flavor = "balanced";
            hold-trigger-key-positions = <6 7 8 9 10 11 18 19 20 21 22 23 30 31 32 33 34 35 39 40 40 41 36 37 38>;
            hold-trigger-on-release;
        };

        hmr: hmr {
            compatible = "zmk,behavior-hold-tap";
            label = "HMR";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <80>;
            flavor = "balanced";
            hold-trigger-key-positions = <0 1 2 4 5 12 13 14 15 16 17 24 25 26 27 28 29 36 37 38 3 39 40 41>;
            hold-trigger-on-release;
        };

        hyper_left: hyper_left {
            compatible = "zmk,behavior-hold-tap";
            label = "HYPER_LEFT";
            bindings = <&hyper>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <280>;
            quick-tap-ms = <170>;
            require-prior-idle-ms = <150>;
            flavor = "balanced";
            hold-trigger-key-positions = <6 7 8 9 10 11 18 19 20 21 22 23 30 31 32 33 34 35 39 40 41 38 36 37 38 36 37 38 39 40 41>;
        };

        hyper_right: hyper_right {
            compatible = "zmk,behavior-hold-tap";
            label = "HYPER_RIGHT";
            bindings = <&hyper>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <280>;
            quick-tap-ms = <170>;
            require-prior-idle-ms = <150>;
            flavor = "balanced";
            hold-trigger-key-positions = <0 1 2 3 4 5 12 13 14 15 16 17 24 25 26 27 28 29 36 37 38 39 40 41>;
        };
    };

    combos {
        compatible = "zmk,combos";

        jk_esc {
            bindings = <&kp ESC>;
            key-positions = <19 20>;
            layers = <1 2>;
        };

        kl_und {
            bindings = <&kp UNDERSCORE>;
            key-positions = <20 21>;
            layers = <1 2>;
        };

        minus {
            bindings = <&kp MINUS>;
            key-positions = <32 33>;
            layers = <1 2>;
        };

        single_quote {
            bindings = <&kp SINGLE_QUOTE>;
            key-positions = <22 21>;
            layers = <1 2>;
        };

        equal {
            bindings = <&kp EQUAL>;
            key-positions = <19 18>;
            layers = <1 2>;
        };

        backtick {
            bindings = <&kp GRAVE>;
            key-positions = <1 2>;
            layers = <1 2>;
        };

        pipe {
            bindings = <&kp PIPE>;
            key-positions = <19 7>;
            layers = <1 2>;
        };

        right_parentheses {
            bindings = <&kp RIGHT_PARENTHESIS>;
            key-positions = <18 6>;
            layers = <1 2>;
        };

        left_parentheses {
            bindings = <&kp LEFT_PARENTHESIS>;
            key-positions = <5 17>;
            layers = <1 2>;
        };

        left_bracket {
            bindings = <&kp LEFT_BRACKET>;
            key-positions = <17 29>;
            layers = <1 2>;
        };

        right_bracket {
            bindings = <&kp RIGHT_BRACKET>;
            key-positions = <18 30>;
            layers = <1 2>;
        };

        tab {
            bindings = <&kp TAB>;
            key-positions = <16 15>;
            layers = <1 2>;
        };

        at {
            bindings = <&kp AT>;
            key-positions = <16 17>;
            layers = <1 2>;
        };

        left_brace {
            bindings = <&kp LEFT_BRACE>;
            key-positions = <16 28>;
            layers = <1 2>;
        };

        right_brace {
            bindings = <&kp RIGHT_BRACE>;
            key-positions = <19 31>;
            layers = <1 2>;
        };

        Photoshop_1 {
            bindings = <&to 3>;
            key-positions = <8 9 10>;
            layers = <0>;
        };

        Default_layer {
            bindings = <&to 0>;
            key-positions = <1 2 3>;
            layers = <3 4>;
        };
    };

    macros {
        hyper: hyper {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LEFT_COMMAND &kp LEFT_ALT &kp LEFT_CONTROL &kp LEFT_SHIFT>;
            label = "HYPER";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&none  &kp Q        &kp W            &kp E                &kp R              &kp T                      &kp Y                    &kp U              &kp I                &kp O            &kp P                           &none
&none  &hml LGUI A  &hml LEFT_ALT S  &hml LEFT_CONTROL D  &hml LEFT_SHIFT F  &hml LG(LC(LS(LALT))) G    &hmr LG(LC(LS(LALT))) H  &hmr LEFT_SHIFT J  &hmr LEFT_CONTROL K  &hmr LEFT_ALT L  &hmr LEFT_COMMAND SINGLE_QUOTE  &none
&none  &kp Z        &kp X            &kp C                &kp V              &kp B                      &kp N                    &kp M              &kp COMMA            &kp DOT          &kp FSLH                        &none
                                     &kp LS(BACKSPACE)    &kp LEFT_SHIFT     &mo 2                      &mo 1                    &kp SPACE          &kp ENTER
            >;
        };

        layer_1 {
            bindings = <
&trans  &kp N1        &kp N2      &kp N3         &kp N4        &kp N5           &kp N6                &kp N7                 &kp N8            &kp N9             &kp N0             &trans
&trans  &kp LS(EXCL)  &kp LS(AT)  &kp LS(POUND)  &kp LS(DLLR)  &kp LS(PRCNT)    &kp LS(CARET)         &kp LS(AMPS)           &kp LS(STAR)      &kp LS(LPAR)       &kp LS(SEMICOLON)  &trans
&trans  &trans        &trans      &trans         &trans        &trans           &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp LEFT_BRACKET  &kp RIGHT_BRACKET  &kp BACKSLASH      &trans
                                  &trans         &trans        &trans           &trans                &trans                 &trans
            >;
        };

        layer_2 {
            bindings = <
&trans  &kp GRAVE   &trans        &trans        &trans        &trans    &trans    &trans    &trans  &trans     &trans  &trans
&trans  &bt BT_CLR  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &trans    &kp LEFT  &kp DOWN  &kp UP  &kp RIGHT  &trans  &trans
&trans  &trans      &trans        &trans        &trans        &trans    &trans    &trans    &trans  &trans     &trans  &trans
                                  &trans        &trans        &trans    &trans    &trans    &trans
            >;
        };

        PS_BASE {
            bindings = <
&trans  &kp Q      &kp L      &kp M           &trans            &kp LEFT_ALT    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &kp B      &kp L      &kp E           &kp G             &trans          &trans  &trans  &trans  &trans  &trans  &trans
&trans  &kp GRAVE  &kp LC(Z)  &kp LS(LC(Z))   &trans            &trans          &trans  &trans  &trans  &trans  &trans  &trans
                              &kt LEFT_SHIFT  &kp LEFT_CONTROL  &mo 4           &trans  &trans  &trans
            >;
        };

        PS_NAV {
            bindings = <
&trans  &trans     &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &kp SPACE  &kp Z   &kp R   &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans     &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
                           &trans  &trans  &trans    &trans  &trans  &trans
            >;
        };
    };
};
